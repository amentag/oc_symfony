security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        App\Entity\User: sha512
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_AUTHOR, ROLE_MODERATOR]
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
        in_memory:
            memory:
                users:
                    author2:  { password: authorpass, roles: [ 'ROLE_AUTHOR' ] }
                    moderator2:  { password: moderatorpass, roles: [ 'ROLE_MODERATOR' ] }
                    admin2: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
        my_provider:
            id: fos_user.user_provider.username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main_login:
            # Cette expression régulière permet de prendre /login (mais pas /login_check !)
            pattern:   ^/login$
            anonymous: true # On autorise alors les anonymes sur ce pare-feu
        main:
            pattern: ^/
            anonymous: false
            provider:  my_provider # ici je choisis le provider in_memory ou my_provider
            form_login:
                login_path: login
                check_path: login_check
            logout:
                path:       logout
                target:     login

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
