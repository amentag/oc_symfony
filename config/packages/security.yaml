security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        App\Entity\User: sha512
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_AUTHOR, ROLE_MODERATOR]
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
        in_memory:
            memory:
                users:
                    author2:  { password: authorpass, roles: [ 'ROLE_AUTHOR' ] }
                    moderator2:  { password: moderatorpass, roles: [ 'ROLE_MODERATOR' ] }
                    admin2: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
        my_provider:
            id: fos_user.user_provider.username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/
            form_login:
                provider: my_provider
                csrf_token_generator: security.csrf.token_manager
            logout:       true
            anonymous:    true
            remember_me:
                secret:     '%kernel.secret%'
#        main:
#            pattern:      ^/
#            anonymous:    false
#            provider:     my_provider
#            form_login:
#                login_path: fos_user_security_login
#                check_path: fos_user_security_check
#            logout:
#                path:       fos_user_security_logout
#                target:     fos_user_security_login
#            remember_me:
#                secret:     '%kernel.secret%'
#

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, role: IS_AUTHENTICATED_FULLY }
